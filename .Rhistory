mapCS
stage <- toGeoJSON(data="~/French_Way/demoX.kml")
map <- leaflet(data=stage)
browseURL(map)
mapCS <- Leaflet$new()
mapCS$addKML('~/French_Way/demoX.kml')
mapCS
map1 = Leaflet$new()
map1$setView(c(37.422069, -122.087461), 13)
map1$tileLayer(provider = 'Stamen.TonerLite')
map1$addAssets(css = NULL, jshead = 'http://harrywood.co.uk/maps/examples/leaflet/leaflet-plugins/layer/vector/KML.js')
map1$addKML('http://kml-samples.googlecode.com/svn/trunk/kml/Placemark/placemark.kml')
map1
map1
map <- leaflet(data=demoX.geojson)
browseURL(map)
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
requiere(rCharts)
require(rCharts)
require(rMaps)
require(rMaps)
map <- Leaflet$new()
map$setView(c(51.505, -0.09), zoom = 13)
map$tileLayer(provider = 'Stamen.Watercolor')
map$marker(
c(51.5, -0.09),
bindPopup = 'Hi. I am a popup'
)
map
map <- leaflet(data=demoX.geojson)
browseURL(map)
map <- leaflet(data='~/French_Way/demoX.geojson')
browseURL(map)
map <- leaflet(data='~/French_Way/demoX.geojson')
map
map <- leaflet(data='~/French_Way/demoX.geojson')
map <- leaflet(data='demoX.geojson')
browseURL(map)
map$marker(c(-1.319763812529985,43.00954730092566), bindPopup = "<p> Saint Jean </p>")
toGeoJSON(data="~/French_Way/stage1_p.kml")
map <- leaflet(data='stage1_p.geojson')
# devtools::install_github('rCharts', 'bbest') # tweak to make var geojsonLayer available
require(rCharts)
json = '{"type":"FeatureCollection","features":[
{"type":"Feature",
"properties":{"region_id":1, "region_name":"Australian Alps"},
"geometry":{"type":"Polygon","coordinates":[[[141.13037109375,-38.788345355085625],[141.13037109375,-36.65079252503469],[144.38232421875,-36.65079252503469],[144.38232421875,-38.788345355085625],[141.13037109375,-38.788345355085625]]]}},
{"type":"Feature",
"properties":{"region_id":4, "region_name":"Shark Bay"},
"geometry":{"type":"Polygon","coordinates":[[[143.10791015625,-37.75334401310656],[143.10791015625,-34.95799531086791],[146.25,-34.95799531086791],[146.25,-37.75334401310656],[143.10791015625,-37.75334401310656]]]}}
]}'
regions=RJSONIO::fromJSON(json)
lmap <- Leaflet$new()
lmap$tileLayer(provide='Stamen.TonerLite')
lmap$setView(c(-37, 145), zoom = 6)
lmap$geoJson(
regions,
style = "#! function(feature) {
var rgn2col = {1:'red',2:'blue',4:'green'};
return {
color: rgn2col[feature.properties['region_id']],
strokeWidth: '1px',
strokeOpacity: 0.5,
fillOpacity: 0.2
}; } !#",
onEachFeature = "#! function (feature, layer) {
// info rollover
if (document.getElementsByClassName('info leaflet-control').length == 0 ){
info = L.control({position: 'topright'});  // NOTE: made global b/c not ideal place to put this function
info.onAdd = function (map) {
this._div = L.DomUtil.create('div', 'info');
this.update();
return this._div;
};
info.update = function (props) {
this._div.innerHTML = '<h4>Field Name</h4>' +  (props ?
props['region_id'] + ': <b> + props[fld] + </b>'
: 'Hover over a region');
};
info.addTo(map);
};
// mouse events
layer.on({
// mouseover to highlightFeature
mouseover: function (e) {
var layer = e.target;
layer.setStyle({
strokeWidth: '3px',
strokeOpacity: 0.7,
fillOpacity: 0.5
});
if (!L.Browser.ie && !L.Browser.opera) {
layer.bringToFront();
}
info.update(layer.feature.properties);
},
// mouseout to resetHighlight
mouseout: function (e) {
geojsonLayer.resetStyle(e.target);
info.update();
},
// click to zoom
click: function (e) {
var layer = e.target;
if ( feature.geometry.type === 'MultiPolygon' ) {
// for multipolygons get true extent
var bounds = layer.getBounds(); // get the bounds for the first polygon that makes up the multipolygon
// loop through coordinates array, skip first element as the bounds var represents the bounds for that element
for ( var i = 1, il = feature.geometry.coordinates[0].length; i < il; i++ ) {
var ring = feature.geometry.coordinates[0][i];
var latLngs = ring.map(function(pair) {
return new L.LatLng(pair[1], pair[0]);
});
var nextBounds = new L.LatLngBounds(latLngs);
bounds.extend(nextBounds);
}
map.fitBounds(bounds);
} else {
// otherwise use native target bounds
map.fitBounds(e.target.getBounds());
}
}
});
} !#")
legend_vec = c('red'='high', 'blue'='medium', 'green'='low')
lmap$legend(position = 'bottomright',
colors   =  names(legend_vec),
labels   =  as.vector(legend_vec))
lmap
json = '{"type": "FeatureCollection",
"crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
"features": [
{ "type": "Feature", "properties": { "Name": "Stage1", "Description": "" }, "geometry": { "type": "LineString", "coordinates": [ [ 1.22903812990623, 43.205663997010539, 0.0 ], [ 1.231150879729581, 43.193585510783407, 0.0 ], [ 1.233578815272636, 43.179622708545168, 0.0 ], [ 1.239795286729335, 43.171683172056611, 0.0 ], [ 1.246314689813097, 43.161817206445477, 0.0 ], [ 1.252132000416986, 43.155920072882083, 0.0 ], [ 1.258252640976587, 43.14809589382498, 0.0 ], [ 1.267374880370593, 43.136430551448413, 0.0 ], [ 1.276738373707422, 43.122931891652399, 0.0 ], [ 1.283952543191895, 43.107657344532413, 0.0 ], [ 1.287833583086955, 43.098188055347322, 0.0 ], [ 1.291093374383989, 43.09253006957897, 0.0 ], [ 1.297575876697692, 43.081274952226401, 0.0 ], [ 1.303432114154421, 43.073809640308262, 0.0 ], [ 1.307194391011417, 43.064553625539467, 0.0 ], [ 1.312672688503802, 43.059035889982567, 0.0 ], [ 1.318396142036315, 43.051714704490038, 0.0 ], [ 1.313744535106736, 43.051735749906427, 0.0 ], [ 1.311418756559004, 43.051746182841562, 0.0 ] ] } },
{ "type": "Feature", "properties": { "Name": "hola", "Description": "" }, "geometry": { "type": "Point", "coordinates": [ 1.156027777777778, 43.167250666379623, 0.0 ] } }
]
}'
regions=RJSONIO::fromJSON(json)
lmap <- Leaflet$new()
lmap$tileLayer(provide='Stamen.TonerLite')
lmap$setView(c(-1.319763812529985,43.00954730092566), zoom = 13)
lmap
lmap$geoJson(regions)
lmap
library(leaflet)
leafletMap("map", width="100%", height="100%",
initialTileLayer = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
initialTileLayerAttribution = HTML('Maps by <a href="http://www.mapbox.com/">Mapbox</a>'),
options=list(
center = c(37.45, -93.85),
zoom = 4,
maxBounds = list(list(15.961329,-129.92981), list(52.908902,-56.80481)) # Show US only
)
)
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
runApp('The_way')
requiere(shiny)
requiere('shiny')
library(shiny)
runApp('The_way')
library(leafletR)
runApp('The_way')
runApp('The_way')
runApp('Bike_Demo')
runApp('Cities_Demo')
runApp('The_way')
runApp('The_way')
map1 <- leaflet(data='data/demoX.geojson')
map1 <- leaflet('data/demoX.geojson')
map1 <- leafletR('data/demoX.geojson')
library(leafletR)
library(leafletR)
map1 <- leafletR('data/demoX.geojson')
map1 <- leaflet('data/demoX.geojson')
library(shiny)
library(rMaps)
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
rCharts::chartOutput('myplot', 'datamaps')
)
),
server = function(input, output, session){
output$myplot = rCharts::renderChart2({ichoropleth(
Crime ~ State,
data = subset(violent_crime, Year == 2010),
pal = input$pal,
ncuts = input$ncuts
)})
}
))
install.packages("devtools")
library(devtools)
install_github("rgbif", "ropensci", ref="newapi")
install.packages("devtools")
library(devtools)
install_github("rgbif", "ropensci", ref="newapi")
library(devtools)
install_github("rgbif", "ropensci", ref="newapi")
install_github("rgbif", "ropensci", ref="newapi")
install.packages("rgbif")
library(rgbif)
library(rgbif)
gist
gist('~/The_Way/demoX/demoX.geojson')
stage1 <- read.csv("~/Desktop/stage1.csv", header=FALSE)
View(stage1)
require(yaml)
leafletLib <- file.path(find.package("rCharts"), "libraries", "leaflet")
rMapsConfig <- yaml.load_file(file.path(leafletLib, "config.yml"))
# add a kml library
kmlLib <- readLines("http://harrywood.co.uk/maps/examples/leaflet/leaflet-plugins/layer/vector/KML.js")
write(kmlLib, file.path(leafletLib, "external", "leaflet-kml.js"))
# add the library to config.yml
rMapsConfig$leaflet$jshead <- union(rMapsConfig$leaflet$jshead , "external/leaflet-kml.js")
write(as.yaml(rMapsConfig), file.path(leafletLib, "config.yml"))
library(shiny)
library(rCharts)
library(rMaps)
runApp(
list(ui =fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs", "Number of observations:", min = 0, max = 1000, value = 500)
),
mainPanel(
tabsetPanel(
tabPanel("Interactive", tags$style('.leaflet {height: 1000px;}'),
showOutput('mapPlot', 'leaflet'))
)
)
)
),
server = function(input, output,session) {
output$mapPlot <- renderUI({
map1 = Leaflet$new()
map1$setView(c(45.5236, -122.675), 13)
map1$tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png")
map1$addKML('leaflet/placemark.kml')
leafletLib <- file.path(find.package("rCharts"), "libraries", "leaflet")
sampleKml <- readLines('http://kml-samples.googlecode.com/svn/trunk/kml/Placemark/placemark.kml')
write(sampleKml, file.path(leafletLib, 'placemark.kml'))
HTML(map1$html(chartId = "mapPlot"))})
})
)
net <- RJSONIO::fromJSON('~/The_Way2/stage1.json')
net
data(quakes)
q.dat <- toGeoJSON(data=quakes[1:99,], dest=tempdir(), name="quakes")
library(leafletR)
q.dat <- toGeoJSON(data=quakes[1:99,], dest=tempdir(), name="quakes")
q.style <- styleGrad(prop="mag", breaks=seq(4, 6.5, by=0.5),                     style.val=rev(heat.colors(5)), leg="Richter Magnitude", fill.alpha=0.7, rad=8)
q.style <- styleGrad(prop="mag", breaks=seq(4, 6.5, by=0.5),style.val=rev(heat.colors(5)), leg="Richter Magnitude", fill.alpha=0.7, rad=8)
q.map <- leaflet(data=q.dat, dest=tempdir(), title="Fiji Earthquakes",base.map="mqsat", style=q.style, popup="mag")
q.map
browseURL(q.map)
data=q.dat
head(data)
t_p <- toGeoJSON('hola_2ptos.kml')
t.map <- leaflet(data=t_p)
browseURL(t.map)
browseURL(t.map)
t.map <- leaflet(data=t_p,popup="Name")
browseURL(t.map)
t.map <- leaflet(data=t_p,popup="Name")
browseURL(t.map)
t.map <- leaflet(data='~/The_Way/demoX/demoX.geojson')
browseURL(t.map)
t.map <- leaflet(data='~/The_Way/demoX/demoX.geojson',popup="Name")
browseURL(t.map)
reg=RJSONIO::fromJSON('~/The_Way/demoX/demoX.geojson')
reg
type(reg)
head(reg)
t.map <- leaflet(data='~/The_Way/demoX/demoX.geojson',popup="Name")
require(yaml)
leafletLib <- file.path(find.package("rCharts"), "libraries", "leaflet")
rMapsConfig <- yaml.load_file(file.path(leafletLib, "config.yml"))
# add a kml library
kmlLib <- readLines("http://harrywood.co.uk/maps/examples/leaflet/leaflet-plugins/layer/vector/KML.js")
write(kmlLib, file.path(leafletLib, "external", "leaflet-kml.js"))
# add the library to config.yml
rMapsConfig$leaflet$jshead <- union(rMapsConfig$leaflet$jshead , "external/leaflet-kml.js")
write(as.yaml(rMapsConfig), file.path(leafletLib, "config.yml"))
t.map <- leaflet(data='~/The_Way/demoX/demoX.geojson',popup="Name")
t.map <- leaflet(data='~/testX.geojson')
t.map <- leaflet(data='~/testX.geojson')
t.map <- leaflet(data='~/testX.geojson')
t.map <- leaflet(data=~/testX.geojson)
t.map <- leaflet(data=testX.geojson)
t.map <- leaflet(data='testX.geojson'')
t.map <- leaflet(data='testX.geojson')
t.map <- leaflet(data='testX.geojson')
t.map <- leaflet('testX.geojson')
t.map <- leaflet('testX.geojson')
t.map <- leaflet(data='testX.geojson')
t.map <- leaflet(data='testX.geojson')
t.map <- leaflet(data='testX.geojson')
t.map <- leaflet(data='testX.geojson')
t.map <- leaflet(data='testX.geojson')
t.map <- leaflet(data='~/testX.geojson')
t.map <- leaflet(data='~/The_Way/demoX/demoX.geojson',popup="Name")
t.map <- leaflet(data='~/The_Way/demoX/demoX.geojson',popup="Name")
browseURL(t.map)
t.map <- leaflet(data='~/The_Way/demoX/demoX.geojson',popup="Stage")
browseURL(t.map)
leaflet(data='data/demoX.geojson',popup='Stage')
leaflet(data='~/The_Way/data/demoX.geojson',popup='Stage')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
require(yaml)
leafletLib <- file.path(find.package("rCharts"), "libraries", "leaflet")
rMapsConfig <- yaml.load_file(file.path(leafletLib, "config.yml"))
# add a kml library
kmlLib <- readLines("http://harrywood.co.uk/maps/examples/leaflet/leaflet-plugins/layer/vector/KML.js")
write(kmlLib, file.path(leafletLib, "external", "leaflet-kml.js"))
# add the library to config.yml
rMapsConfig$leaflet$jshead <- union(rMapsConfig$leaflet$jshead , "external/leaflet-kml.js")
write(as.yaml(rMapsConfig), file.path(leafletLib, "config.yml"))
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
map1<-leaflet(data='~/The_Way/data/demoX.geojson',popup='Stage')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
require(yaml)
leafletLib <- file.path(find.package("rCharts"), "libraries", "leaflet")
rMapsConfig <- yaml.load_file(file.path(leafletLib, "config.yml"))
# add a kml library
kmlLib <- readLines("http://harrywood.co.uk/maps/examples/leaflet/leaflet-plugins/layer/vector/KML.js")
write(kmlLib, file.path(leafletLib, "external", "leaflet-kml.js"))
# add the library to config.yml
rMapsConfig$leaflet$jshead <- union(rMapsConfig$leaflet$jshead , "external/leaflet-kml.js")
write(as.yaml(rMapsConfig), file.path(leafletLib, "config.yml"))
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
dat='~/The_Way/data/demoX.geojson'
dat
runApp('The_Way')
polys = RJSONIO::fromJSON(~/The_Way/data/demoX.geojson)
polys = RJSONIO::fromJSON('~/The_Way/data/demoX.geojson')
polys
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
xy = cbind(
c(13.42666, 13.42666, 13.56383, 13.56358, 13.42666),
c(48.99831, 49.08815, 49.08815, 48.99831, 48.99831)
)
xyjson = RJSONIO::toJSON(xy)
jsonX = paste(
'{"type":"FeatureCollection","features":[
{"type":"Feature",
"properties":{"region_id":1, "region_name":"My Region"},
"geometry":{"type":"Polygon","coordinates": [ ',xyjson,' ]}}]}')
polys = RJSONIO::fromJSON(jsonX)
map = Leaflet$new()
map$tileLayer(provider = 'Stamen.TonerLite')
map$setView(c(49.1,13.5), zoom = 8)
map$geoJson(polys)
map
runApp('The_Way')
runApp('The_Way')
runApp('The_Way')
map1<-leaflet(data='~/The_Way/data/demoX.geojson',popup='Stage')
browseURL(map1)
runApp('The_Way')
map1
runApp('The_Way')
runApp('The_Way')
library(shiny)
library(rMaps)
runApp(list(
ui = pageWithSidebar(
headerPanel("Shiny, rCharts and DataMaps"),
sidebarPanel(
selectInput("pal", 'Select Palette', c('Blues', 'PuRd')),
numericInput("ncuts", 'Select Number of Breaks', value = 5, min = 4, max = 9)
),
mainPanel(
rCharts::chartOutput('myplot', 'datamaps')
)
),
server = function(input, output, session){
output$myplot = rCharts::renderChart2({ichoropleth(
Crime ~ State,
data = subset(violent_crime, Year == 2010),
pal = input$pal,
ncuts = input$ncuts
)})
}
))
runApp('The_Way')
runApp('The_Way')
q.dat <- toGeoJSON(data=quakes[1:99,], dest=tempdir(), name="quakes")
runApp('The_Way')
runApp('The_Way')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
runApp('The_Way2')
require(shiny)
runApp('~/The_Way2')
sampleKml <- readLines('~/Desktop/stage1.kml')
sampleKml
write(sampleKml, file.path(leafletLib, 'stage1.kml'))
find.package("rCharts")
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
'a'+'b'
c='a'+'b'
paste(1:12)
file.path(find.package("rCharts"), "libraries", "leaflet")
file.path("leaflet")
file.path("leaflet",'hola')
paste("A", 1:6, sep = "")
paste("A", 1:6, sep = )
paste("hola", '.kml', sep = )
paste("hola", '.kml')
paste("hola", '.kml',sep='')
a=paste('stage1','.kml')
a
a=paste('stage1','.kml',sep='')
a
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
map1 = Leaflet$new()
map1$addKML('~/Desktop/stage1.kml')
map1
map1$addKML('/Library/Frameworks/R.framework/Versions/3.1/Resources/library/rCharts/libraries/leaflet/stage1.kml')
map1
map1
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
runApp('~/The_Way2')
